Here's the `.md` formatted note for **11. Secrets and Security** in GitHub Actions:

---

# üîê **11. Secrets and Security**

Securely manage API keys, tokens, and sensitive environment variables in your GitHub Actions workflows.

---

## üîë **GitHub Secrets**

Store secrets under:

**GitHub ‚Üí Your Repo ‚Üí Settings ‚Üí Secrets and variables ‚Üí Actions**

Add secrets like:

* `API_KEY`
* `DATABASE_URL`
* `JWT_SECRET`

---

## üîß **Use Secrets in Workflows**

```yaml
env:
  API_KEY: ${{ secrets.API_KEY }}

steps:
  - name: Run with secret
    run: echo "Using secret key: $API_KEY"
```

> üö® **Avoid printing sensitive values**. Use secrets in commands, not logs.

---

## üß∞ **Best Practices**

| Practice                         | Reason                                       |
| -------------------------------- | -------------------------------------------- |
| Use `secrets.*`                  | Never hardcode sensitive data                |
| Protect environment access       | Limit permissions for PRs and branches       |
| Rotate secrets regularly         | Reduce impact in case of exposure            |
| Combine with GitHub Environments | For scoped secrets (e.g., `staging`, `prod`) |

---

## üõ°Ô∏è Example: Use Secret Token

```yaml
- name: Deploy with token
  env:
    DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
  run: |
    curl -X POST -H "Authorization: Bearer $DEPLOY_TOKEN" https://your-api.com/deploy
```

---

Let me know if you want examples with **environment-specific secrets** or **manual approval steps**!
