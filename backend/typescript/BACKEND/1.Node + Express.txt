Here's a comprehensive breakdown of **TypeScript for Backend Developers** with a focus on **Node.js + Express**:

---

## 🧱 **Node + Express + TypeScript**

### 🔹 **1. Setup**

Install types and tools:

```bash
npm install express
npm install -D typescript ts-node @types/express
```

Create a `tsconfig.json`:

```json
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "commonjs",
    "outDir": "./dist",
    "strict": true,
    "esModuleInterop": true
  }
}
```

---

### 🔹 **2. Typing `Request`, `Response`, `NextFunction`**

```ts
import express, { Request, Response, NextFunction } from 'express';

const app = express();

app.get('/users/:id', (req: Request, res: Response) => {
  const id: string = req.params.id;
  res.send(`User ID: ${id}`);
});
```

---

### 🔹 **3. Create Typed Middleware**

```ts
const loggerMiddleware = (
  req: Request,
  res: Response,
  next: NextFunction
): void => {
  console.log(`[${req.method}] ${req.url}`);
  next();
};

app.use(loggerMiddleware);
```

---

### 🔹 **4. Request Body Validation with Zod / Joi / class-validator**

#### ✅ Zod (recommended for functional approach)

```ts
import { z } from 'zod';

const userSchema = z.object({
  name: z.string(),
  email: z.string().email(),
});

type User = z.infer<typeof userSchema>;

app.post('/users', (req: Request, res: Response) => {
  const parsed = userSchema.safeParse(req.body);
  if (!parsed.success) {
    return res.status(400).json(parsed.error);
  }

  const user: User = parsed.data;
  res.json({ message: 'User created', user });
});
```

#### 🧪 Joi Example:

```ts
import Joi from 'joi';

const schema = Joi.object({
  username: Joi.string().required(),
});

const { error, value } = schema.validate(req.body);
```

#### 🏛 class-validator + class-transformer (OOP style)

```ts
import { IsString } from 'class-validator';
import { plainToClass } from 'class-transformer';

class CreateUserDto {
  @IsString()
  name: string;
}
```

---

### 🔹 **5. Type Custom Request Body**

```ts
interface AuthRequest extends Request {
  user?: { id: string; role: string };
}

app.get('/profile', (req: AuthRequest, res: Response) => {
  if (req.user) {
    res.send(`Hello ${req.user.id}`);
  } else {
    res.status(401).send('Unauthorized');
  }
});
```

---

Would you like a **complete starter boilerplate** for Express + TypeScript with Zod validation and error handling?
