### 🔧 **Working with Redis in Node.js**

Redis is often used in Node.js apps for caching, session storage, and more. Here's how to work with it using the most popular clients:

---

## 📦 1. **Popular Redis Clients**

### 🔹 `ioredis` (recommended for production)

* Robust, cluster support, promises built-in.

```bash
npm install ioredis
```

```js
const Redis = require('ioredis');
const redis = new Redis(); // Defaults to localhost:6379
```

### 🔹 `redis` (official package)

* Lightweight, actively maintained.

```bash
npm install redis
```

```js
const redis = require('redis');
const client = redis.createClient();

client.connect().catch(console.error);
```

---

## ✅ 2. **Promisify Redis Operations** (only needed for older `redis` versions)

For older `redis` clients (v3), use `util.promisify`:

```js
const { promisify } = require('util');
const redis = require('redis');
const client = redis.createClient();

const getAsync = promisify(client.get).bind(client);
const setAsync = promisify(client.set).bind(client);

(async () => {
  await setAsync('foo', 'bar');
  const val = await getAsync('foo');
  console.log(val); // bar
})();
```

Modern `redis` and `ioredis` clients already support Promises.

---

## 🔁 3. **Basic Operations**

```js
// Set
await redis.set('key', 'value');

// Get
const value = await redis.get('key');

// Expire in 60 seconds
await redis.setex('tempKey', 60, 'tempData');

// Delete
await redis.del('key');

// Check if key exists
const exists = await redis.exists('key');
```

---

## 🧪 4. **Advanced Patterns**

* **JSON storage**:

  ```js
  await redis.set('user:123', JSON.stringify({ name: 'Alice', age: 30 }));
  const user = JSON.parse(await redis.get('user:123'));
  ```

* **Lists**:

  ```js
  await redis.lpush('tasks', 'Task1');
  const task = await redis.rpop('tasks');
  ```

* **Hashes**:

  ```js
  await redis.hset('user:1', 'name', 'Bob', 'age', 25);
  const user = await redis.hgetall('user:1');
  ```

---

Would you like a full sample Express app using `ioredis` for caching, sessions, and rate limiting?
