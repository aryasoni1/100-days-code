### 🚀 **Redis Use Cases in Node.js**

Redis is a high-performance tool that fits naturally into the Node.js ecosystem for improving speed, scalability, and user experience. Here's how to use it effectively:

---

## 1️⃣ **Cache Database Queries**

**Use Case**: Avoid repeated DB reads for frequently accessed data.

### Example: Caching MongoDB or PostgreSQL Results

```js
const key = `product:${productId}`;
let product = await redis.get(key);

if (!product) {
  product = await db.getProductById(productId); // e.g., Mongo/Postgres query
  await redis.setEx(key, 3600, JSON.stringify(product)); // Cache for 1 hour
}
return JSON.parse(product);
```

---

## 2️⃣ **Cache API Responses**

**Use Case**: Cache full API responses to reduce load and latency.

### Example: GET `/products`

```js
app.get('/products', async (req, res) => {
  const cached = await redis.get('products:all');
  if (cached) return res.json(JSON.parse(cached));

  const products = await db.getAllProducts(); // DB call
  await redis.setEx('products:all', 300, JSON.stringify(products)); // 5 min cache
  res.json(products);
});
```

---

## 3️⃣ **Session Store with `connect-redis`**

**Use Case**: Store session data in Redis for scalability.

### Setup with Express:

```js
const session = require('express-session');
const RedisStore = require('connect-redis')(session);
const redisClient = require('./redisClient');

app.use(session({
  store: new RedisStore({ client: redisClient }),
  secret: 'your-secret',
  resave: false,
  saveUninitialized: false,
  cookie: { maxAge: 60000 }
}));
```

---

## 4️⃣ **Rate Limiting with Redis**

**Use Case**: Prevent abuse by limiting requests per IP.

### With `express-rate-limit-redis`:

```bash
npm install express-rate-limit rate-limit-redis
```

```js
const rateLimit = require('express-rate-limit');
const RedisStore = require('rate-limit-redis');

const limiter = rateLimit({
  store: new RedisStore({
    sendCommand: (...args) => redisClient.sendCommand(args),
  }),
  windowMs: 60 * 1000, // 1 minute
  max: 100, // limit each IP to 100 requests per minute
});

app.use(limiter);
```

---

## 🔧 Redis Client Setup (e.g., `ioredis`)

```js
const Redis = require('ioredis');
const redis = new Redis(); // default localhost:6379
module.exports = redis;
```

---

Would you like a boilerplate combining all of these Redis use cases into a single Express app?
