### üöÄ **Advanced Redis Features**

Redis isn‚Äôt just a simple key-value store ‚Äî it supports a wide range of powerful data structures and real-time capabilities. Here's a breakdown of **advanced Redis features** you can use to build complex, high-performance apps:

---

## üî£ 1. **Hashes for Structured Data**

Useful for storing related fields, like rows in a table.

```bash
HSET user:1000 name "Alice" age 30
HGET user:1000 name
HGETALL user:1000
```

üî∏ **Example in Node.js (`ioredis`)**:

```js
await redis.hset('user:1000', 'name', 'Alice', 'age', '30');
const user = await redis.hgetall('user:1000');
console.log(user); // { name: 'Alice', age: '30' }
```

---

## üì¢ 2. **Pub/Sub for Real-Time Messaging**

Redis supports **publish/subscribe** to build real-time chat, notifications, etc.

```bash
SUBSCRIBE news
PUBLISH news "New article posted"
```

üî∏ **Example in Node.js**:

```js
const subscriber = new Redis();
const publisher = new Redis();

subscriber.subscribe('news');
subscriber.on('message', (channel, message) => {
  console.log(`Received on ${channel}: ${message}`);
});

publisher.publish('news', 'Hello subscribers!');
```

---

## üßÆ 3. **Sorted Sets for Leaderboards**

Each item has a score. Great for high scores, rankings, etc.

```bash
ZADD leaderboard 1000 "Alice"
ZADD leaderboard 1500 "Bob"
ZRANGE leaderboard 0 -1 WITHSCORES
```

üî∏ **Example**:

```js
await redis.zadd('leaderboard', 1500, 'Bob', 1000, 'Alice');
const topPlayers = await redis.zrange('leaderboard', 0, -1, 'WITHSCORES');
console.log(topPlayers); // ['Alice', '1000', 'Bob', '1500']
```

---

## ‚öôÔ∏è 4. **Streams for Event-Driven Systems (Redis ‚â• 5.0)**

Used for logs, message queues, and event sourcing.

```bash
XADD mystream * user "Alice" action "login"
XRANGE mystream - +
```

üî∏ **Example**:

```js
await redis.xadd('mystream', '*', 'user', 'Alice', 'action', 'login');
const events = await redis.xrange('mystream', '-', '+');
console.log(events);
```

---

## üß† Bonus Use Cases:

| Feature         | Use Case                                   |
| --------------- | ------------------------------------------ |
| **Hashes**      | User profiles, config settings             |
| **Pub/Sub**     | Notifications, chat apps, real-time games  |
| **Sorted Sets** | Leaderboards, scheduling, rankings         |
| **Streams**     | Event logs, job queues, analytics pipeline |

---

Would you like to explore Redis Streams with consumer groups or build a leaderboard with sorted sets in a live app?
