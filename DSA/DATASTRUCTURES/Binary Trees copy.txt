Here are the `.md` notes for **Binary Trees**:

---

# üå≥ Binary Trees

A **binary tree** is a hierarchical data structure where each node has at most two children, referred to as the left and right children. Binary trees are widely used for searching, sorting, and in decision-making processes.

---

## üå± Binary Tree Terminology

* **Root**: The topmost node of the tree.
* **Node**: Each element of the tree.
* **Leaf**: A node with no children.
* **Internal Node**: A node with at least one child.
* **Height**: The length of the longest path from the node to a leaf.
* **Depth**: The number of edges from the root to the node.
* **Diameter**: The longest path between any two nodes in the tree.

---

## üîÑ Traversals

Traversals define the order in which the nodes are visited. There are several common types:

### 1. **Preorder Traversal** (Root ‚Üí Left ‚Üí Right)

* Visit the root node first, then traverse the left subtree, and finally the right subtree.

* **Algorithm**:

  * Visit the root node.
  * Recursively visit the left subtree.
  * Recursively visit the right subtree.

* **Example**:

  ```javascript
  function preorder(root) {
    if (root === null) return;
    console.log(root.value); // Visit the node
    preorder(root.left);    // Traverse the left subtree
    preorder(root.right);   // Traverse the right subtree
  }
  ```

### 2. **Inorder Traversal** (Left ‚Üí Root ‚Üí Right)

* Traverse the left subtree first, then visit the root node, and finally the right subtree.

* **Algorithm**:

  * Recursively visit the left subtree.
  * Visit the root node.
  * Recursively visit the right subtree.

* **Example**:

  ```javascript
  function inorder(root) {
    if (root === null) return;
    inorder(root.left);     // Traverse the left subtree
    console.log(root.value); // Visit the node
    inorder(root.right);    // Traverse the right subtree
  }
  ```

### 3. **Postorder Traversal** (Left ‚Üí Right ‚Üí Root)

* Traverse the left subtree first, then the right subtree, and finally visit the root node.

* **Algorithm**:

  * Recursively visit the left subtree.
  * Recursively visit the right subtree.
  * Visit the root node.

* **Example**:

  ```javascript
  function postorder(root) {
    if (root === null) return;
    postorder(root.left);    // Traverse the left subtree
    postorder(root.right);   // Traverse the right subtree
    console.log(root.value);  // Visit the node
  }
  ```

### 4. **Level-order Traversal** (Breadth-First Search)

* Visit nodes level by level, starting from the root. This is typically implemented using a queue.

* **Algorithm**:

  * Use a queue to store nodes.
  * Visit the root node, then its children, then their children, and so on.

* **Example**:

  ```javascript
  function levelOrder(root) {
    if (!root) return;
    let queue = [root];
    while (queue.length > 0) {
      let node = queue.shift();
      console.log(node.value);
      if (node.left) queue.push(node.left);
      if (node.right) queue.push(node.right);
    }
  }
  ```

---

## üå≥ Properties of Binary Trees

### 1. **Height**

The **height** of a node is the number of edges on the longest path from the node to a leaf. The **height** of the tree is the height of the root node.

* **Example**:

  ```javascript
  function height(root) {
    if (root === null) return -1; // No nodes
    return Math.max(height(root.left), height(root.right)) + 1;
  }
  ```

### 2. **Depth**

The **depth** of a node is the number of edges from the root to the node. The **depth** of the root is 0.

* **Example**:

  ```javascript
  function depth(root, value, d = 0) {
    if (root === null) return -1;
    if (root.value === value) return d;
    
    let leftDepth = depth(root.left, value, d + 1);
    if (leftDepth !== -1) return leftDepth;
    return depth(root.right, value, d + 1);
  }
  ```

### 3. **Diameter**

The **diameter** of a binary tree is the longest path between any two nodes in the tree. It can pass through the root or not.

* **Example**:

  ```javascript
  function diameter(root) {
    if (root === null) return 0;
    let leftHeight = height(root.left);
    let rightHeight = height(root.right);
    
    let leftDiameter = diameter(root.left);
    let rightDiameter = diameter(root.right);
    
    return Math.max(leftHeight + rightHeight + 2, Math.max(leftDiameter, rightDiameter));
  }
  ```

### 4. **Mirror**

A **mirror** of a binary tree is a tree where the left and right subtrees of every node are swapped.

* **Example**:

  ```javascript
  function mirror(root) {
    if (root === null) return;
    let temp = root.left;
    root.left = root.right;
    root.right = temp;
    mirror(root.left);
    mirror(root.right);
  }
  ```

---

## üõ† Serialization & Deserialization

### 1. **Serialization**

Serialization is the process of converting a binary tree into a string or an array so that it can be stored or transmitted.

* **Example**:

  ```javascript
  function serialize(root) {
    if (root === null) return '#';
    return root.value + ',' + serialize(root.left) + ',' + serialize(root.right);
  }
  ```

### 2. **Deserialization**

Deserialization is the process of converting the serialized string or array back into a binary tree.

* **Example**:

  ```javascript
  function deserialize(data) {
    let values = data.split(',');
    
    function buildTree() {
      let value = values.shift();
      if (value === '#') return null;
      let node = new TreeNode(value);
      node.left = buildTree();
      node.right = buildTree();
      return node;
    }
    
    return buildTree();
  }
  ```

---

## üìù Summary

* **Traversals**: Preorder, Inorder, Postorder, and Level-order are different ways of visiting nodes in a binary tree.
* **Height, Depth, and Diameter**: Measure the size and distance within a binary tree.
* **Mirror**: The process of reversing the left and right subtrees of a binary tree.
* **Serialization/Deserialization**: Transforming a tree into a storable format and back into a tree.

Let me know if you need further explanations or examples!
