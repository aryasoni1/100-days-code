Here are the `.md` notes for **Arrays**:

---

# ðŸ§® Arrays

Arrays are fundamental data structures used to store collections of items, such as numbers or strings, in a contiguous block of memory. Understanding arrays is crucial for working with many algorithms and data structures.

---

## ðŸ”² Fixed vs. Dynamic Arrays

### 1. **Fixed Arrays**

A fixed array is an array with a set size that cannot be changed after it's created. The size of the array is determined at the time of initialization.

* **Characteristics**:

  * **Static size**: Once declared, the size of the array cannot be altered.
  * **Memory**: Occupies a contiguous block of memory of fixed size.
* **Example in JavaScript**:

  JavaScript arrays are dynamic by default, but if you want to create an array with a fixed size, you can pre-define it with `Array(n)`:

  ```javascript
  let arr = new Array(5);  // Fixed array with 5 undefined elements
  console.log(arr);  // Output: [ <5 empty items> ]
  ```

  **Note**: JavaScript does not have true fixed-size arrays like languages such as C or Java, but this can simulate it to some extent.

### 2. **Dynamic Arrays**

A dynamic array can grow or shrink in size during execution, depending on the needs of the program. Dynamic arrays typically resize when they exceed their current capacity, often doubling in size.

* **Characteristics**:

  * **Resizable**: The array can grow and shrink dynamically.
  * **Performance**: Dynamic arrays tend to resize when adding or removing elements, which may involve copying data to a new memory location.
* **Example in JavaScript** (Dynamic by default):

  ```javascript
  let arr = [1, 2, 3];  // Dynamic array
  arr.push(4);           // Add an element to the end
  console.log(arr);      // Output: [1, 2, 3, 4]
  ```

---

## ðŸ§± Multidimensional Arrays

Multidimensional arrays are arrays that contain other arrays as their elements. They are useful for representing matrices or grids, where each element is itself a list.

### 1. **2D Arrays (Matrix)**

A 2D array is essentially an array of arrays, where each inner array represents a row in a matrix.

* **Example in JavaScript**:

  ```javascript
  let matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
  ];

  console.log(matrix[0][0]); // Output: 1 (First element in the first row)
  ```

### 2. **3D and Higher-Dimensional Arrays**

Higher-dimensional arrays follow the same concept as 2D arrays, but with more nested arrays. For example, a 3D array can represent a cube of data.

* **Example of 3D Array**:

  ```javascript
  let cube = [
    [
      [1, 2], [3, 4]
    ],
    [
      [5, 6], [7, 8]
    ]
  ];

  console.log(cube[1][1][1]); // Output: 8 (Second element in the second 2D array)
  ```

---

## ðŸ”„ Common Operations on Arrays

### 1. **Traversal**

Traversal refers to the process of visiting each element of an array and performing operations on them.

* **Example** (Using a loop in JavaScript):

  ```javascript
  let arr = [1, 2, 3, 4, 5];

  // Using a for loop to traverse
  for (let i = 0; i < arr.length; i++) {
    console.log(arr[i]);  // Output: 1, 2, 3, 4, 5
  }

  // Using forEach (Higher-order function)
  arr.forEach(element => console.log(element));
  ```

### 2. **Insertion**

Insertion involves adding new elements to an array. This can be done in various ways, including at the beginning, middle, or end of the array.

* **Example** (Using `push` and `unshift`):

  ```javascript
  let arr = [2, 3, 4];

  // Insertion at the end
  arr.push(5);  // arr = [2, 3, 4, 5]

  // Insertion at the beginning
  arr.unshift(1);  // arr = [1, 2, 3, 4, 5]
  ```

### 3. **Deletion**

Deletion is the operation of removing an element from the array. Elements can be removed from the beginning, middle, or end of the array.

* **Example** (Using `pop` and `shift`):

  ```javascript
  let arr = [1, 2, 3, 4];

  // Remove the last element
  arr.pop();  // arr = [1, 2, 3]

  // Remove the first element
  arr.shift();  // arr = [2, 3]
  ```

### 4. **In-place vs. Out-of-place Transforms**

* **In-place transformations** refer to modifying the existing array without creating a new array. The original array is updated directly.

  * **Example** (In-place: modifying the array directly):

    ```javascript
    let arr = [1, 2, 3];
    arr.push(4);  // In-place operation
    console.log(arr);  // Output: [1, 2, 3, 4]
    ```

* **Out-of-place transformations** refer to creating a new array, leaving the original array unchanged.

  * **Example** (Out-of-place: returning a new array):

    ```javascript
    let arr = [1, 2, 3];
    let newArr = arr.map(x => x * 2);  // New array is created
    console.log(arr);     // Output: [1, 2, 3]
    console.log(newArr);  // Output: [2, 4, 6]
    ```

---

## âœ¨ Summary

Arrays are versatile data structures and a cornerstone of programming. Here's a recap of key topics:

* **Fixed vs. Dynamic Arrays**:

  * Fixed arrays have a fixed size, whereas dynamic arrays can grow or shrink as needed.

* **Multidimensional Arrays**:

  * Arrays can be extended to multiple dimensions, allowing for complex data structures like matrices or 3D grids.

* **Common Operations**:

  * Common operations on arrays include traversal, insertion, deletion, and transforming elements in-place or out-of-place.

---

Let me know if you need additional details on any topic!
