Here are the `.md` notes for **Elementary Sorts**:

---

# 📚 Elementary Sorts

Elementary sorts are basic sorting algorithms that help in understanding how sorting works and form the foundation for more advanced algorithms. These algorithms typically operate in **O(n²)** time complexity, making them inefficient for large data sets but useful for educational purposes.

---

## 🏐 Bubble Sort

**Bubble Sort** is one of the simplest sorting algorithms. It repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.

* **Algorithm**:

  1. Start at the beginning of the array.
  2. Compare each pair of adjacent elements.
  3. If they are out of order, swap them.
  4. Repeat the process until no more swaps are needed, meaning the array is sorted.

* **Time Complexity**:

  * Best: **O(n)** (when the array is already sorted)
  * Average/Worst: **O(n²)**

* **Example**:

  ```javascript
  function bubbleSort(arr) {
    let n = arr.length;
    let swapped;
    do {
      swapped = false;
      for (let i = 0; i < n - 1; i++) {
        if (arr[i] > arr[i + 1]) {
          [arr[i], arr[i + 1]] = [arr[i + 1], arr[i]]; // Swap
          swapped = true;
        }
      }
      n--; // After each pass, the largest element is in its correct position
    } while (swapped);
    return arr;
  }
  ```

---

## 🏆 Insertion Sort

**Insertion Sort** works similarly to the way you might sort playing cards in your hands. It builds the final sorted array one item at a time. It is much more efficient on small arrays or nearly sorted data.

* **Algorithm**:

  1. Start from the second element.
  2. Compare the current element to the one before it.
  3. Move the current element leftward until it's in its correct position.
  4. Repeat for each element in the array.

* **Time Complexity**:

  * Best: **O(n)** (when the array is already sorted)
  * Average/Worst: **O(n²)**

* **Example**:

  ```javascript
  function insertionSort(arr) {
    for (let i = 1; i < arr.length; i++) {
      let current = arr[i];
      let j = i - 1;
      
      // Shift elements of arr[0..i-1] that are greater than current
      while (j >= 0 && arr[j] > current) {
        arr[j + 1] = arr[j];
        j--;
      }
      
      // Place the current element into its correct position
      arr[j + 1] = current;
    }
    return arr;
  }
  ```

---

## 🏅 Selection Sort

**Selection Sort** works by repeatedly finding the minimum (or maximum) element from the unsorted part of the array and swapping it with the first unsorted element.

* **Algorithm**:

  1. Start from the beginning of the array.
  2. Find the smallest element in the remaining unsorted array.
  3. Swap the smallest element with the first unsorted element.
  4. Repeat until the array is sorted.

* **Time Complexity**:

  * Best: **O(n²)**
  * Average/Worst: **O(n²)**

* **Example**:

  ```javascript
  function selectionSort(arr) {
    let n = arr.length;
    for (let i = 0; i < n - 1; i++) {
      let minIndex = i;
      for (let j = i + 1; j < n; j++) {
        if (arr[j] < arr[minIndex]) {
          minIndex = j;
        }
      }
      // Swap the found minimum element with the first unsorted element
      [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];
    }
    return arr;
  }
  ```

---

## 🔍 Comparison of Elementary Sorts

| **Algorithm**      | **Best Case** | **Average Case** | **Worst Case** | **Space Complexity** |
| ------------------ | ------------- | ---------------- | -------------- | -------------------- |
| **Bubble Sort**    | O(n)          | O(n²)            | O(n²)          | O(1)                 |
| **Insertion Sort** | O(n)          | O(n²)            | O(n²)          | O(1)                 |
| **Selection Sort** | O(n²)         | O(n²)            | O(n²)          | O(1)                 |

---

## ✨ Key Points

* **Bubble Sort**: Works by swapping adjacent elements if they are in the wrong order. It is simple but inefficient for large datasets.
* **Insertion Sort**: Efficient for small or nearly sorted arrays, works by moving elements into their correct position one by one.
* **Selection Sort**: Finds the minimum element and places it in its correct position. It performs a fixed number of swaps, but is still inefficient for larger datasets.

These algorithms are useful in understanding the basic principles of sorting, although they are not used in practice for large datasets due to their inefficiency.

---

Let me know if you need further explanations or examples!
