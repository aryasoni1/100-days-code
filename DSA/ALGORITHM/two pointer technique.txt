Here are your **Markdown (.md)** formatted notes on **Two-Pointer Technique**:

---

# 🔄 **Two-Pointer Technique**

The **Two-Pointer Technique** is a commonly used algorithmic technique to solve problems that involve arrays or lists. It uses two pointers to traverse the data structure, usually from opposite ends or at different speeds, to find an optimal solution.

---

## 🔄 **Opposite-End Pointers**

### 1. **Definition**:

* The **Opposite-End Pointers** approach uses two pointers starting from opposite ends of a list or array. They move towards each other until they meet, often used for problems involving sorting, searching, or partitioning data.

### 2. **Common Use Cases**:

* **Finding pairs that sum to a target value**.
* **Reversing an array**.
* **Partitioning arrays based on a condition**.

### 3. **Example: Finding Pair with Target Sum**:

Given a sorted array, find two numbers whose sum is equal to a target sum.

```python
def two_sum(nums, target):
    left, right = 0, len(nums) - 1
    while left < right:
        current_sum = nums[left] + nums[right]
        if current_sum == target:
            return (nums[left], nums[right])
        elif current_sum < target:
            left += 1
        else:
            right -= 1
    return None
```

* **Explanation**: The `left` pointer starts at the beginning and the `right` pointer starts at the end of the sorted array. If the sum of the values at both pointers equals the target, the pair is found. If the sum is less than the target, the `left` pointer is moved to the right to increase the sum. If the sum is greater than the target, the `right` pointer is moved left to decrease the sum.

---

## 🏃‍♂️ **Fast/Slow Pointers (Cycle Detection, Midpoint)**

### 1. **Definition**:

* The **Fast/Slow Pointer** technique involves using two pointers, where one pointer moves faster than the other. This technique is particularly useful for detecting cycles or finding the midpoint in linked lists, among other use cases.

### 2. **Common Use Cases**:

* **Cycle detection in a linked list** (Floyd's Tortoise and Hare algorithm).
* **Finding the midpoint of a linked list**.
* **Detecting duplicate elements in a list**.

### 3. **Example 1: Cycle Detection (Floyd’s Tortoise and Hare)**:

This algorithm detects if a cycle exists in a linked list. If the slow and fast pointers meet, there is a cycle.

```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def has_cycle(head):
    slow, fast = head, head
    while fast and fast.next:
        slow = slow.next           # Move slow pointer by 1
        fast = fast.next.next      # Move fast pointer by 2
        if slow == fast:           # If they meet, there is a cycle
            return True
    return False
```

* **Explanation**: The `slow` pointer moves one step at a time, while the `fast` pointer moves two steps at a time. If a cycle exists, the `fast` pointer will eventually catch up with the `slow` pointer. If there is no cycle, the `fast` pointer will reach the end of the list.

### 4. **Example 2: Finding the Midpoint of a Linked List**:

The fast pointer moves two steps at a time, while the slow pointer moves one step at a time. When the fast pointer reaches the end, the slow pointer will be at the midpoint.

```python
def find_midpoint(head):
    slow, fast = head, head
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
    return slow  # Slow will be at the midpoint
```

* **Explanation**: The `slow` pointer reaches the middle of the list when the `fast` pointer reaches the end of the list.

---

## 📚 **Summary Table**

| **Technique**             | **Description**                                                             | **Example**                                      |
| ------------------------- | --------------------------------------------------------------------------- | ------------------------------------------------ |
| **Opposite-End Pointers** | Two pointers start at opposite ends of a list and move toward each other.   | Finding pair with target sum                     |
| **Fast/Slow Pointers**    | One pointer moves faster than the other to detect cycles or find midpoints. | Cycle detection, finding midpoint in linked list |

---

Let me know if you'd like additional details or examples!
